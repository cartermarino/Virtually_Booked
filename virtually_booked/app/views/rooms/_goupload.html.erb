package streetsphere

import (
  "archive/zip"
  "bytes"
  "fmt"
  "html/template"
  "net/http"
  "time"

  "appengine"
)

var (
  outputTemplate = template.Must(template.ParseFiles("output.html"))
)

func init() {
  http.Handle("/upload", errorHandler(uploadHandler))
}

// uploadHandler retreives the image provided by the user, pads the image,
// generates a HTML file, then stores both files within a ZIP, which is then
// sent in the response.
func uploadHandler(c appengine.Context, w http.ResponseWriter, r *http.Request) *appError {
  wbuf := new(bytes.Buffer)

  fn := fmt.Sprintf("photosphere-streetview-%d", time.Now().Unix())

  err := r.ParseMultipartForm(25 << 20) // 25 MiB limit
  if err != nil {
    return appErrorf(err, "could not parse form")
  }
  if r.MultipartForm == nil {
    return appErrorf(nil, "could not parse form")
  }

  b := r.MultipartForm.File["img"]
  if len(b) < 1 {
    return appErrorf(nil, "could not find image in upload")
  }
  img := b[0]

  ir, err := img.Open()
  if err != nil {
    return appErrorf(err, "could not read image from upload")
  }

  zw := zip.NewWriter(wbuf)
  iw, err := zw.Create(fmt.Sprintf("%s/%s", fn, img.Filename))
  if err != nil {
    return appErrorf(err, "could not create image in zip")
  }

  pano, err := Pad(iw, ir)
  if err != nil {
    return appErrorf(err, "could not convert image to street view format")
  }

  hw, err := zw.Create(fmt.Sprintf("%s/streetview.html", fn))
  if err != nil {
    return appErrorf(err, "could not create index file in zip")
  }

  header := fmt.Sprintf("<!-- Generated by %s.appspot.com -->", appengine.AppID(c))
  err = outputTemplate.Execute(hw, struct {
    ImageFilename string
    Pano          *PanoOpts
    Header        template.HTML
  }{img.Filename, pano, template.HTML(header)})
  if err != nil {
    return appErrorf(err, "could not write index file")
  }

  err = zw.Close()
  if err != nil {
    return appErrorf(err, "could not create zip file")
  }

  w.Header().Add("Content-Disposition", fmt.Sprintf(`attachment;filename="%s.zip"`, fn))
  if _, err := wbuf.WriteTo(w); err != nil {
    return appErrorf(err, "could not send zip file")
  }
  return nil
}

func logError(c appengine.Context, msg string, err error) {
  c.Errorf("%s (%v)", msg, err)
}

type errorHandler func(appengine.Context, http.ResponseWriter, *http.Request) *appError

func (handler errorHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
  c := appengine.NewContext(r)
  if e := handler(c, w, r); e != nil {
    http.Error(w, e.Message, e.Code)
    logError(c, e.Message, e.Error)
  }
}

type appError struct {
  Error   error
  Message string
  Code    int
}

func appErrorf(err error, format string, v ...interface{}) *appError {
  return &appError{err, fmt.Sprintf(format, v...), 500}
}


// <script type='text/javascript'>

// var initPosPanoID, streetView;

// function initialize() {
//   //In front of Ardenwood.
//   var initPos = new google.maps.LatLng(37.55631,-122.051153);  

//   // Set StreetView provider.
//   var streetViewOptions = {
//     zoom: 1,
//     panoProvider:  getCustomPanorama,
//     pov : {
//       heading : 55,
//       pitch : 0,
//       zoom : 1
//     }
//   };
  
//   // Create a StreetView object.
//   var streetViewDiv = document.getElementById('streetview_canvas2');
//   streetViewDiv.style.fontSize = "15px";
//   streetView = new google.maps.StreetViewPanorama(streetViewDiv, streetViewOptions);

//   // Add links when it happens "links_change" event.
//   google.maps.event.addListener(streetView, "links_changed", createCustomLink);
  
//   // Create a StreetViewService object.
//   var streetviewService = new google.maps.StreetViewService();
  
//   // Get panorama ID of initPos
//   var radius = 50;
//   streetviewService.getPanoramaByLocation(initPos, radius, function(result, status) {
//     if (status == google.maps.StreetViewStatus.OK) {
//       initPosPanoID = result.location.pano;
//       streetView.setPosition(result.location.latLng);
//     }
//   });
  
// }

// function getCustomPanoramaTileUrl(panoID, zoom, tileX, tileY) {
//   // Return a pano image given the panoID.
//   return "system/photos/images/000/000/008/original/IMG_9500.JPG";
//    // + panoID + '/'  + tileX + '-' +tileY + '_s1.jpg';
// }

// function getCustomPanorama(panoID) {
//   var streetViewPanoramaData = {
//     links: [],
//     copyright: 'Imagery (c) Masashi Katsumata',
//     tiles: {
//         tileSize: new google.maps.Size(256, 256),
//         worldSize: new google.maps.Size(2048, 1024),
//         centerHeading: 0,
//         getTileUrl: getCustomPanoramaTileUrl
//      }
//   };
//   switch(panoID) {
//     case "visitor_center":
//       streetViewPanoramaData["location"] = {
//         pano: 'visitor_center',
//         description: "Visitor center",
//         latLng: new google.maps.LatLng(37.556429,-122.050745)
//       };
//       return streetViewPanoramaData;
//   }
// }

// function createCustomLink() {
//   /*
//    * add links
//    */
//   var links = streetView.getLinks();
//   var panoID = streetView.getPano();
  
//   switch(panoID) {
//     case initPosPanoID:
//       links.push({
//         description : "Welcome to Ardenwood",
//         pano : "visitor_center",
//         heading : 71
//       });
//       break;
      
//     case "visitor_center":
//       links.push({
//         description : "Parking",
//         pano : initPosPanoID,
//         heading : 248
//       });
//       break;
      
//   }
  
// }
// google.maps.event.addDomListener(window, 'load', initialize);
//     </script>